from datetime import datetime, timedelta

from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BufferedInputFile, InputMediaPhoto, ChatMemberUpdated
from config import settings
from aiogram import Bot, Dispatcher, types, F, Router

from keyboards.keyboard import cancel, not_subscription, publish_keyboard, Yes, need_raffle, need_raffle_change, \
    menu_channel, publishg, confirmation_r
from handlers.handler import AddRaffle, AdditionalRaffle, AddChannel
from lexicon.lexicon_message import LEXICON
from loop.send_raffle import send_raffle, choose_winner
from sql import ChannelDAO, RaffleDAO, ParticipantDAO

# —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–æ —Ä–∞–∑–Ω—ã–º —Ñ–∞–π–ª–∞–º
router = Router()
# –Ω–∞–¥–æ –æ—Ç –Ω–µ–≥–æ –∏–∑–±–∞–≤–∏—Ç—å—Å—è, –Ω–æ –Ω–µ –∑–Ω–∞—é –∫–∞–∫
bot = Bot(token=settings.get_token())


# –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
@router.callback_query(F.data.in_(
    ['add_channel']
))
async def callback_admin(callback: types.CallbackQuery, state: FSMContext):
    await bot.send_message(chat_id=callback.from_user.id, text=LEXICON['instruction'],
                           reply_markup=cancel,
                           parse_mode='HTML')
    # –≤–∫–ª—é—á–µ–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
    await state.set_state(AddChannel.add_channel)


# –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –≤–∞—Ä–∏–Ω–∞—Ç–æ–≤ –∫–Ω–æ–ø–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
@router.callback_query(F.data.in_(
    ['engage', "engage!", "take_part"]
))
async def callback_engage(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "engage":
        await state.update_data(text_button="–£—á–∞—Å—Ç–≤—É—é")
    elif callback.data == "engage!":
        await state.update_data(text_button="–£—á–∞—Å—Ç–≤—É—é!")
    elif callback.data == "take_part":
        await state.update_data(text_button="–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏")
    await bot.send_message(chat_id=callback.from_user.id,
                           text="‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    await bot.send_message(chat_id=callback.from_user.id,
                           text=LEXICON['instruction_add_channel'],
                           reply_markup=not_subscription)
    # –≤–∫–ª—é—á–µ–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
    await state.set_state(AddRaffle.channels_subscribe)


# –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–Ω–∞–ª–æ–≤
@router.callback_query(F.data.in_(
    ["enough_channel"]
))
async def callback_enough(callback: types.CallbackQuery, state: FSMContext):
    await bot.send_message(chat_id=callback.from_user.id, text="‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    await bot.send_message(chat_id=callback.from_user.id, text="üßÆ –°–∫–æ–ª—å–∫–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π –≤—ã–±—Ä–∞—Ç—å –±–æ—Ç—É?")
    # –≤–∫–ª—é—á–µ–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
    await state.set_state(AddRaffle.number_winners)


# –Ω–∞–∂–∞—Ç–∏–µ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à
@router.callback_query(F.data.contains("name_channel"))
async def name_channel(callback: types.CallbackQuery, state: FSMContext):
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    await state.update_data(channel_send=f'{callback.data.split(" ")[1]}')
    await bot.send_message(chat_id=callback.from_user.id, text='‚è∞ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?',
                           reply_markup=publish_keyboard)

@router.callback_query(F.data.contains("add_channel"))
async def add_name_channel(callback: types.CallbackQuery, state: FSMContext):
    #await state.update_data(channel_send=f'{callback.data.split(" ")[1]}')
    data = callback.data.split(",")
    raffle = await RaffleDAO.find_one_or_none(id=data[-1])
    message = await bot.send_message(chat_id=callback.from_user.id, text=f'‚ÑπÔ∏è –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª - {data[2]}',
                           reply_markup=publishg)
    await state.update_data(add_pubkish_channel=raffle[0].id,
                            add_channel=data[1],
                            message_id=message.message_id
                            )


@router.callback_query(F.data.in_(
    ["publish", "no_publish"]
))
async def publish(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if callback.data == "publish":

        raffle = await RaffleDAO.find_one_or_none(id=data["add_pubkish_channel"])
        await RaffleDAO.update(id=data["add_pubkish_channel"],
                               pablish_channal=f'{raffle[0].pablish_channal} {data["add_channel"]}')
        if raffle[0].time_start == '0' or raffle[0].start_time < datetime.now().strftime("%d.%m.%Y %H:%M"):
            await send_raffle(text=raffle[0].text_raffle, text_button=raffle[0].text_button, raffle_id=raffle[0].id,
                              chat_ids=data["add_channel"])
    else:
        await bot.delete_message(chat_id=callback.from_user.id,message_id=data['message_id'])

@router.callback_query(F.data.contains("name_my_channel"))
async def name_channel(callback: types.CallbackQuery, state: FSMContext):
    channel_telegram_id = await ChannelDAO.find_one_or_none(name=f'{callback.data[16::]}',
                                                            user_telegram_id=callback.from_user.id)
    await state.update_data(channel_update_delete=channel_telegram_id[0].channel_telegram_id)
    await bot.send_message(chat_id=callback.from_user.id, text='üì¢ –ú–µ–Ω—é –∫–∞–Ω–∞–ª–∞:',
                           reply_markup=menu_channel)

@router.callback_query(F.data.in_(
    ["delete_channel", "cancel_my_channel", "update_name"]
))
async def publish(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if callback.data == "delete_channel":

        await bot.send_message(chat_id=callback.from_user.id, text='‚ö†Ô∏è –ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª –∏–∑ –±–æ—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n'
                                                                   f'/delete_channel {data["channel_update_delete"]}')
    elif callback.data == "cancel_my_channel":
        await state.clear()
        await bot.send_message(chat_id=callback.from_user.id, text='–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    elif callback.data == "update_name":
        #bot.get_chat_member(chat_id=-1002457442445, user_id=callback.from_user.id)
        channel = await ChannelDAO.find_one_or_none(channel_telegram_id=data["channel_update_delete"])
        channel_check = await bot.get_chat(chat_id=data["channel_update_delete"])
        if channel[0].name == channel_check.title:
            await bot.send_message(chat_id=callback.from_user.id, text='–ò–º—è –Ω–µ –º–µ–Ω—è–ª–æ—Å—å')
        else:
            await ChannelDAO.update(id=channel[0].id, name=channel_check.title)
            await bot.send_message(chat_id=callback.from_user.id, text=f'–ò–º—è –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ {channel_check.title}')



@router.callback_query(F.data.in_(
    ["right_now", "choose_time"]
))
async def publish(callback: types.CallbackQuery, state: FSMContext):

    if callback.data == "right_now":
        await state.update_data(publish_time=0)
        await bot.send_message(chat_id=callback.from_user.id,
                               text="‚úÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–æ")
        await bot.send_message(chat_id=callback.from_user.id,
                               text="üóì –ö–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?", reply_markup=need_raffle)
    else:
        await state.set_state(AddRaffle.publish_time)
        await bot.send_message(chat_id=callback.from_user.id,
                               text="‚è∞ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à? (–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥ —á—á:–º–º)\n\n"
                                    "–ë–æ—Ç –∂–∏–≤–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (GMT+3) –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è")

        await bot.send_message(chat_id=callback.from_user.id,
                               text=f'–ü—Ä–∏–º–µ—Ä—ã\n\n'
                                    f'`{(datetime.now() + timedelta(minutes=10)).strftime("%d.%m.%Y %H:%M")}` - 10 –º–∏–Ω—É—Ç\n'
                                    f'`{(datetime.now() + timedelta(hours=1)).strftime("%d.%m.%Y %H:%M")}` - 1 —á–∞—Å\n'
                                    f'`{(datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y %H:%M")}` - 1 –¥–µ–Ω—å\n'
                                    f'`{(datetime.now() + timedelta(weeks=1)).strftime("%d.%m.%Y %H:%M")}` - 1 –Ω–µ–¥–µ–ª—è\n',
                               parse_mode="MARKDOWN"
                               )
        await state.set_state(AddRaffle.publish_time)


@router.callback_query(F.data.contains("add_participant"))
async def add_participant_callback(callback: types.CallbackQuery, state: FSMContext):
    check = await ParticipantDAO.find_one_or_none(post_id=callback.data.split(" ")[1],
                             participant_telegram_id=callback.from_user.id)
    if not check:
        await ParticipantDAO.add(post_id=callback.data.split(" ")[1],
                                 participant_telegram_id=callback.from_user.id,
                                 participant_name=callback.from_user.first_name,
                                 participant_user_name=callback.from_user.username,
                                 )

        raffle = await RaffleDAO.find_all(id=callback.data.split(" ")[1])
        await RaffleDAO.update(id=callback.data.split(" ")[1],
                               number_participants=raffle[0].number_participants + 1
                               )
        try:
            if raffle[0].number_participants + 1 >= raffle[0].max_participants:
                await choose_winner(raffle_id=callback.data.split(" ")[1])
        except:
            pass


    # await bot.edit_message(
    #     chat_id=callback.message.chat.id,
    #     message_id=callback.message.message_id,
    #
    # )
    # –≤ –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ–º –±–æ—Ç–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å–∫–æ–ª—å–∫–æ —É—á–∞—Å–Ω–∏–∫–æ–≤ –≤ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–µ —è —ç—Ç–æ–≥–æ –¥–µ–ª–∞—Ç—å –Ω–µ –±—É–¥—É
    # –º–æ–∂–µ—Ç —Å–¥–µ–ª–∞—é—Ç –ø–æ–∑–∂–µ

@router.callback_query(F.data.in_(
    ["time", "participant"]
))
async def publish(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "time":
        await state.set_state(AddRaffle.end_time)
        await bot.send_message(chat_id=callback.from_user.id,
                               text="üèÅ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è? (–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥ —á—á:–º–º)\n\n"""
                                    "–ë–æ—Ç –∂–∏–≤–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (GMT+3) –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è")

        await bot.send_message(chat_id=callback.from_user.id,
                               text=f'–ü—Ä–∏–º–µ—Ä—ã\n\n'
                                    f'`{(datetime.now() + timedelta(minutes=10)).strftime("%d.%m.%Y %H:%M")}` - 10 –º–∏–Ω—É—Ç\n'
                                    f'`{(datetime.now() + timedelta(hours=1)).strftime("%d.%m.%Y %H:%M")}` - 1 —á–∞—Å\n'
                                    f'`{(datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y %H:%M")}` - 1 –¥–µ–Ω—å\n'
                                    f'`{(datetime.now() + timedelta(weeks=1)).strftime("%d.%m.%Y %H:%M")}` - 1 –Ω–µ–¥–µ–ª—è\n',
                               parse_mode="MARKDOWN"
                               )

    else:

        await state.set_state(AddRaffle.max_participant)
        await bot.send_message(chat_id=callback.from_user.id,
                               text="üèÅ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n\n"
                                    "‚ùóÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —É—á–∞—Å—Ç–Ω–∏–∫ - —Ç–æ—Ç, –∫—Ç–æ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –∫–æ–Ω–∫—É—Ä—Å–µ, "
                                    "–≤—ã–±–æ—Ä –±—É–¥–µ—Ç –Ω–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞,"
                                    " –∞ –∏–º–µ–Ω–Ω–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∫—Ç–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –∫–æ–Ω–∫—É—Ä—Å–µ)")

@router.callback_query(F.data.in_(
    ["change_time", "change_participant", "change_cance"]
))
async def publish(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "change_time":

        await state.set_state(AdditionalRaffle.change_end_time)
        await bot.send_message(chat_id=callback.from_user.id,
                               text="üèÅ –ö–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è? (–£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥ —á—á:–º–º)\n\n"""
                                    "–ë–æ—Ç –∂–∏–≤–µ—Ç –ø–æ –≤—Ä–µ–º–µ–Ω–∏ (GMT+3) –ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è")

        await bot.send_message(chat_id=callback.from_user.id,
                               text=f'–ü—Ä–∏–º–µ—Ä—ã\n\n'
                                    f'`{(datetime.now() + timedelta(minutes=10)).strftime("%d.%m.%Y %H:%M")}` - 10 –º–∏–Ω—É—Ç\n'
                                    f'`{(datetime.now() + timedelta(hours=1)).strftime("%d.%m.%Y %H:%M")}` - 1 —á–∞—Å\n'
                                    f'`{(datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y %H:%M")}` - 1 –¥–µ–Ω—å\n'
                                    f'`{(datetime.now() + timedelta(weeks=1)).strftime("%d.%m.%Y %H:%M")}` - 1 –Ω–µ–¥–µ–ª—è\n',
                               parse_mode="MARKDOWN"
                               )

    elif callback.data == "change_participant":

        await state.set_state(AdditionalRaffle.change_max_participant)
        await bot.send_message(chat_id=callback.from_user.id,
                               text="üèÅ –£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞:\n\n"
                                    "‚ùóÔ∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —É—á–∞—Å—Ç–Ω–∏–∫ - —Ç–æ—Ç, –∫—Ç–æ –ø–æ—É—á–∞—Å—Ç–≤–æ–≤–∞–ª –≤ –∫–æ–Ω–∫—É—Ä—Å–µ, "
                                    "–≤—ã–±–æ—Ä –±—É–¥–µ—Ç –Ω–µ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∫–∞–Ω–∞–ª–∞,"
                                    " –∞ –∏–º–µ–Ω–Ω–æ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ (–∫—Ç–æ –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É –≤ –∫–æ–Ω–∫—É—Ä—Å–µ)")
    else:
        await bot.send_message(chat_id=callback.from_user.id,
                               text="‚úÖ –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ)")


@router.callback_query(F.data.in_(
    ["save", "cancel", "Yes"]
))
async def save_raffle(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == "save":
        data = await state.get_data()

        # –ø–æ—Ç–æ–º –∏—Å–ø—Ä–∞–≤–∏—Ç—å —ç—Ç–æ —É–±–æ–∂–µ—Å—Ç–≤–æ
        try:
            data = await state.get_data()
            await RaffleDAO.add(text_raffle=data['text_raffle'],
                                text_button=data['text_button'],
                                telegram_id=callback.from_user.id,
                                channel_for_subscription=data['channels_subscribe'],
                                number_winners=data['number_winners'],
                                pablish_channal=data['channel_send'],
                                number_participants=0,
                                max_participants=data['max_participant'],
                                time_start=data['publish_time'],
                                status='create')
            raffle = await RaffleDAO.find_one_or_none(text_raffle=data['text_raffle'],
                                                     text_button=data['text_button'],
                                                     telegram_id=callback.from_user.id,
                                                     channel_for_subscription=data['channels_subscribe'],
                                                     number_winners=data['number_winners'],
                                                     time_start=data['publish_time'],
                                                     status='create')
        except:
            await RaffleDAO.add(text_raffle=data['text_raffle'],
                                text_button=data['text_button'],
                                telegram_id=callback.from_user.id,
                                channel_for_subscription=data['channels_subscribe'],
                                number_winners=data['number_winners'],
                                pablish_channal=data['channel_send'],
                                number_participants=0,
                                time_start=data['publish_time'],
                                time_end=data['time_end'],
                                status='create')
        await bot.send_message(chat_id=callback.from_user.id,
                               text="‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω")
        await bot.send_message(chat_id=callback.from_user.id,
                               text=f"""üÜï –ï—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞–ø–æ—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à –≤ –¥—Ä—É–≥–∏–µ –∫–∞–Ω–∞–ª—ã/—á–∞—Ç—ã,
                                —Ç–æ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ –±–æ—Ç–µ:\n
                                /postlot{raffle[0].id}\n
                                ‚ùóÔ∏è –í–≤–æ–¥—è—â–∏–π –¥–∞–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –¥–æ–ª–∂–µ–Ω —è–≤–ª—è—Ç—å—Å—è –∞–¥–º–∏–Ω–æ–º —Ç–∞–∫–æ–≥–æ –∫–∞–Ω–∞–ª–∞,
                                 –∞ —Å–∞–º –∫–∞–Ω–∞–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª "–º–æ–∏ –∫–∞–Ω–∞–ª—ã" –≤ –±–æ—Ç–µ.""")

        if data['publish_time'] == 0:
            raffle = await RaffleDAO.find_one_or_none(text_raffle=data['text_raffle'],
                                             text_button=data['text_button'],
                                             telegram_id=callback.from_user.id,
                                             channel_for_subscription=data['channels_subscribe'],
                                             number_winners=data['number_winners'],
                                             time_start=data['publish_time'],
                                             status='create')

            await send_raffle(text=data['text_raffle'], text_button=data['text_button'], raffle_id=raffle[0].id,
                              chat_ids=data['channel_send'])

    elif callback.data == "cancel":
        await bot.send_message(chat_id=callback.from_user.id,
                               text="–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞?", reply_markup=Yes)
    else:
        await bot.send_message(chat_id=callback.from_user.id,
                               text="‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ\n"
                                    "–î–ª—è –≤—ã–∑–æ–≤–∞ –º–µ–Ω—é –Ω–∞–ø–∏—à–∏—Ç–µ /start")
        await state.clear()

@router.callback_query(F.data.in_(
    ["confirmation", "no confirmation",]
))
async def confirmation(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if callback.data == "confirmation":
        await choose_winner(raffle_id=data["id"])
    else:
        await bot.send_message(chat_id=callback.from_user.id,
                               text="–û—Ç–º–µ–Ω–∞")



@router.callback_query(F.data.in_(
    ["update_result", "chouse_winner", "delete_raffle", ]
))
async def publish(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if callback.data == "update_result":
        await bot.send_message(chat_id=callback.from_user.id,
                               text="üóì –ö–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?", reply_markup=need_raffle_change)
    elif callback.data == "delete_raffle":
        await RaffleDAO.delete(id=data["id"])
        await bot.send_message(chat_id=callback.from_user.id,
                               text="–†–æ–∑—ã–≥—Ä—ã—à —É–¥–∞–ª–µ–Ω")
    elif callback.data == "chouse_winner":
        #await choose_winner(id=data["id"])
        await bot.send_message(chat_id=callback.from_user.id,
                               text="‚ö†Ô∏è –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞", reply_markup=confirmation_r)





from datetime import time, datetime

from aiogram.filters import ChatMemberUpdatedFilter, JOIN_TRANSITION, KICKED, LEFT, RESTRICTED, MEMBER, ADMINISTRATOR, \
    CREATOR, IS_NOT_MEMBER
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State

from aiogram.types import ChatMemberUpdated

from config import settings
from aiogram import Bot, types, F, Router

from lexicon.lexicon_message import LEXICON
from sql import UserDAO, ChannelDAO, RaffleDAO
from keyboards.keyboard import add_channel_keyboard, names_channel, various_engage, not_subscription, save, my_channel, \
    publish_keyboard, need_raffle, button_raffle, save_raffle, my_lot_keyboard

# —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–æ —Ä–∞–∑–Ω—ã–º —Ñ–∞–π–ª–∞–º
router = Router()
# –Ω–∞–¥–æ –æ—Ç –Ω–µ–≥–æ –∏–∑–±–∞–≤–∏—Ç—å—Å—è, –Ω–æ –Ω–µ –∑–Ω–∞—é –∫–∞–∫
bot = Bot(token=settings.get_token())


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π
class AddRaffle(StatesGroup):
    text_raffle = State()
    text_button = State()
    channels_subscribe = State()
    number_winners = State()
    publish_time = State()
    end_time = State()
    max_participant = State()


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏–π –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
class AdditionalRaffle(StatesGroup):
    change_end_time = State()
    change_max_participant = State()


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤
class AddChannel(StatesGroup):
    add_channel = State()


# —Ñ—É–Ω–∫—Ü–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à ‚ùáÔ∏è")
async def create_raffle(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–Ω–∞–ª—ã –≤ –±–æ—Ç–µ
    channel = await ChannelDAO.find_all(user_telegram_id=message.from_user.id)
    # –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø—Ä–æ—Å—å–±–∞ –∏–∑ –¥–æ–±–∞–≤–∏—Ç—å
    if not channel:
        await bot.send_message(chat_id=message.from_user.id,
                               text=LEXICON["lack_channels"])
    # –µ—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –Ω–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text=LEXICON["start_message"])
        # –≤–∫–ª—é—á–µ–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        await state.set_state(AddRaffle.text_raffle)


# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–∞
@router.message(AddRaffle.text_raffle)
async def add_text_raffle(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if await check_message(message, state):
        return None
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    await state.update_data(text_raffle=message.text)

    await bot.send_message(chat_id=message.from_user.id,
                           text="‚úÖ –¢–µ–∫—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω")
    await bot.send_message(chat_id=message.from_user.id,
                           text=LEXICON["dd_text_button"],
                           reply_markup=various_engage)
    # –≤–∫–ª—é—á–µ–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏ —É—á–∞—Å—Ç–∏—è
    await state.set_state(AddRaffle.text_button)


# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
@router.message(AddRaffle.text_button)
async def add_text_button(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if await check_message(message, state):
        return None
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    await state.update_data(text_button=message.text)

    await bot.send_message(chat_id=message.from_user.id,
                           text="‚úÖ –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
    await bot.send_message(chat_id=message.from_user.id,
                           text=LEXICON['add_channel_raffle'],
                           reply_markup=not_subscription)
    # –≤–∫–ª—é—á–µ–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
    await state.set_state(AddRaffle.channels_subscribe)


# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–æ–≤ –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞–¥–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è
@router.message(AddRaffle.channels_subscribe)
async def add_channels_subscribe(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if await check_message(message, state):
        return None

    data = await state.get_data()
    # –∫–æ–ª—Ö–æ–∑, –Ω–æ –≤—Å–µ –∂–µ –ø–µ—Ä–≤–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è try except –Ω—É–∂–Ω–æ –¥–ª—è –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏ channels_subscribe –≤ –ø–µ—Ä–≤—ã–π —Ä–∞–∑ –≤ except,
    # try –¥–ª—è 2 –∏ —Ç–¥
    # –≤—Ç–æ—Ä–∞—è –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –Ω—É–∂–Ω–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π(–ø–µ—Ä–µ—Å—Å—ã–ª–∫–∞ —Å –≥—Ä—É–ø–ø –∏ —Ç–¥)
    try:
        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —Å–¥–µ–ª–∞–Ω
        await state.update_data(channels_subscribe=f'{data["channels_subscribe"]} {message.forward_origin.chat.id}')
    except KeyError:
        try:
            await state.update_data(channels_subscribe=f'{message.forward_origin.chat.id}')
        except AttributeError:
            await bot.send_message(chat_id=message.from_user.id,
                                   text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return None
    await bot.send_message(chat_id=message.from_user.id,
                           text=LEXICON['true_add_channel'],
                           reply_markup=save,
                           parse_mode='HTML')


# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
@router.message(AddRaffle.number_winners)
async def add_number_winners(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if await check_message(message, state):
        return None
    # –µ—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä–Ω—ã–π (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª —á–∏—Å–ª–æ)
    try:
        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
        await state.update_data(number_winners=int(message.text))
        await bot.send_message(chat_id=message.from_user.id,
                                   text=f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {message.text}")
        # –ø–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        channels = await ChannelDAO.find_all(user_telegram_id=message.from_user.id)
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"üóì –í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ –ø—É–±–ª–∏–∫—É–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à?",
                               reply_markup=my_channel(channels).as_markup())
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —á–∏—Å–ª–æ
    except:
        await bot.send_message(chat_id=message.from_user.id,
                               text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
@router.message(AddRaffle.publish_time)
async def add_time_publish(message: types.Message, state: FSMContext):
    print("f")
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if await check_message(message, state):
        return None
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–µ–¥–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    try:
        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        await state.update_data(publish_time=message.text)
        await bot.send_message(chat_id=message.from_user.id,
                               text="‚úÖ –í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤—ã–±—Ä–∞–Ω–æ")
        await bot.send_message(chat_id=message.from_user.id,
                               text="üóì –ö–∞–∫ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à?", reply_markup=need_raffle)
    # —Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
    except:
        await bot.send_message(chat_id=message.from_user.id,
                               text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
@router.message(AddRaffle.end_time)
async def add_time_end(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if await check_message(message, state):
        return None
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–µ–¥–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    try:
        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        await state.update_data(time_end=message.text)
        await bot.send_message(chat_id=message.from_user.id,
                               text="‚úÖ –í—Ä–µ–º—è –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
        # –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        data = await state.get_data()
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"{data['text_raffle']}",
                               reply_markup=button_raffle(data["text_button"]).as_markup())
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"üßÆ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à\n"
                                    f"–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è {message.text}\n"
                                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {data['number_winners']}",
                               reply_markup=save_raffle)
    # —Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
    except:
        await bot.send_message(chat_id=message.from_user.id,
                               text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å
@router.message(AdditionalRaffle.change_end_time)
async def change_time_end(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if await check_message(message, state):
        return None
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–µ–¥–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    try:
        datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        data = await state.get_data()
        # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∏–Ω—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
        await RaffleDAO.update(id=data["id"], time_end=message.text)
        await bot.send_message(chat_id=message.from_user.id,
                               text="‚úÖ –í—Ä–µ–º—è –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ")
        # —É–¥–∞–ª–µ–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–∏—Ö
        await state.clear()
    except:
        await bot.send_message(chat_id=message.from_user.id,
                               text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
@router.message(AddRaffle.max_participant)
async def add_max_participant(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if await check_message(message, state):
        return None
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–ª–∞
    try:
        # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —á–∏—Å–ª–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        await state.update_data(max_participant=int(message.text))
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {message.text}")
        # –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤–≤–µ–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
        data = await state.get_data()
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"{data['text_raffle']}", reply_markup=button_raffle(data["text_button"]).as_markup())
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"üßÆ –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–æ–∑—ã–≥—Ä—ã—à\n"
                                    f"–†–æ–∑—ã–≥—Ä—ã—à –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è, –∫–æ–≥–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å—Ç–∞–Ω–µ—Ç —Ä–∞–≤–Ω–æ {message.text}\n"
                                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {data['number_winners']}",
                               reply_markup=save_raffle)
    # —Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ
    except:
        await bot.send_message(chat_id=message.from_user.id,
                               text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –µ—Å–ª–∏ –µ—Å—Ç—å
@router.message(AdditionalRaffle.change_max_participant)
async def change_max_participant(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if await check_message(message, state):
        return None
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–≤–µ–¥–µ–Ω–∏–µ —á–∏—Å–ª–∞
    try:
        # –∏–∑–º–µ–Ω–µ–Ω–∏—è —á–∏—Å–ª–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
        data = await state.get_data()
        await RaffleDAO.update(id=data["id"], max_participants=int(message.text))
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –¥–ª—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏–∑–º–µ–Ω–µ–Ω–æ: {message.text}")
        # —É–¥–∞–ª–µ–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã—Ö –≤ –Ω–∏—Ö
        await state.clear()
    # —Ä–∞–±–æ—Ç–∞–µ—Ç –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ —á–∏—Å–ª–æ
    except:
        await bot.send_message(chat_id=message.from_user.id,
                               text="‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã üì¢")
async def add_channel_def(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã
    channel = await ChannelDAO.find_all(user_telegram_id=message.from_user.id)
    if not channel:
        await bot.send_message(chat_id=message.from_user.id,
                               text="‚ÑπÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –∫–∞–Ω–∞–ª—ã:", reply_markup=add_channel_keyboard)
    # –µ—Å–ª–∏ –µ—Å—Ç—å
    else:
        # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –±–¥ –≤ —Å–ø–∏—Å–æ–∫
        name_channel = []
        for i in channel:
            name_channel.append(i.name)
        await bot.send_message(chat_id=message.from_user.id,
                               text="‚ÑπÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞–º–∏ –∫–∞–Ω–∞–ª—ã:",
                               reply_markup=names_channel(name_channel).as_markup())


# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ üéÅ")
async def my_lot_menu(message: types.Message, state: FSMContext):
    # –∑–∞–ø—Ä–æ—Å –≤ –±–¥ –æ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    raffles = await RaffleDAO.find_all(telegram_id=message.from_user.id)
    # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∏–∑ –±–¥ –≤ —Å–ø–∏—Å–æ–∫
    raffles_list = []
    for raffle in raffles:
        raffles_list.append(f'/mylot{raffle.id} {raffle.text_raffle}')
    text_lot = '\n'.join(raffles_list)

    await bot.send_message(chat_id=message.from_user.id,
                           text=f"‚ÑπÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –≤–∞–º–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏:\n{text_lot}")


# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öôÔ∏è")
async def support(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id,
                           text=LEXICON["support"])


# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
@router.message(F.text == "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ë–æ—Ç–∞ ‚≠êÔ∏èÔ∏è")
async def stair(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id,
                           text=LEXICON['stair'])


# –µ—Å–ª–∏ –±–æ—Ç –±—ã–ª –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª
@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=JOIN_TRANSITION))
async def bot_added(event: ChatMemberUpdated, bot: Bot, state: FSMContext):
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –±–¥
    await ChannelDAO.add(
        user_telegram_id=event.from_user.id,
        name=event.chat.title,
        channel_telegram_id=event.chat.id
    )
    await bot.send_message(chat_id=event.from_user.id, text=f"""
    ‚úÖ –ö–∞–Ω–∞–ª {event.chat.title} –¥–æ–±–∞–≤–ª–µ–Ω, –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–æ–∑—ã–≥—Ä—ã—à–∞!\n
–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /new_lot""")


# FSM —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –≤ –±–¥
@router.message(AddChannel.add_channel)
async def add_channel(message: types.Message, state: FSMContext):
    # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç –æ–¥–Ω–æ–π –∏–∑ –∫–æ–º–∞–Ω–¥ –º–µ–Ω—é
    if await check_message(message, state):
        return None
    # –Ω—É–∂–Ω–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≥—Ä—É–ø–ø—ã
    user_status = await bot.get_chat_member(chat_id=message.forward_origin.chat.id, user_id=message.from_user.id)
    try:
        # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª—å –∏–ª–∏ –∞–¥–º–∏–Ω
        if user_status.status == "creator" or user_status.status == "administrator":
            # –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª –≤ –±–¥
            await ChannelDAO.add(user_telegram_id=message.from_user.id,
                                 name=message.forward_origin.chat.title,
                                 channel_telegram_id=message.forward_origin.chat.id)
            await bot.send_message(chat_id=message.from_user.id, text=f"""‚úÖ –ö–∞–Ω–∞–ª {message.forward_origin.chat.title} –¥–æ–±–∞–≤–ª–µ–Ω, 
            –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–æ–∑—ã–≥—Ä—ã—à–∞!
        –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /new_lot
                """)
            await state.clear()
        else:
            await bot.send_message(chat_id=message.from_user.id, text="–í—ã –Ω–µ –∞–¥–º–∏–Ω –∏ –Ω–µ —Å–æ–∑–¥–∞—Ç–µ–ª—å")
    # –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
    except:
        await bot.send_message(chat_id=message.from_user.id,
                               text="–Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—Ç–µ—Å—å –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞")


# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞, –µ–≥–æ –±–∞–Ω, —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–º–æ—á–∏–π
@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=
        (+RESTRICTED | ADMINISTRATOR | CREATOR)
        >>
        (KICKED | LEFT | -RESTRICTED | MEMBER)
    )
)
async def bot_delete(event: ChatMemberUpdated, bot: Bot, state: FSMContext):
    # —É–¥–∞–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –∏–∑ –±–¥
    await ChannelDAO.delete(
        user_telegram_id=event.from_user.id,
        name=event.chat.title,
        channel_telegram_id=event.chat.id
    )
    await bot.send_message(chat_id=event.from_user.id, text=f"""
    ‚ùå –ö–∞–Ω–∞–ª {event.chat.title} —É–¥–∞–ª–µ–Ω""")


# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É
@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=
        (KICKED | LEFT | -RESTRICTED | MEMBER)
        >>
        (+RESTRICTED | ADMINISTRATOR | CREATOR)
    )
)
async def bot_delete(event: ChatMemberUpdated, bot: Bot, state: FSMContext):
    # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ –±–¥
    await ChannelDAO.add(
        user_telegram_id=event.from_user.id,
        name=event.chat.title,
        channel_telegram_id=event.chat.id
    )
    await bot.send_message(chat_id=event.from_user.id, text=f"""
        ‚úÖ –ö–∞–Ω–∞–ª {event.chat.title} –¥–æ–±–∞–≤–ª–µ–Ω, –º–æ–∂–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–∏—é —Ä–æ–∑—ã–≥—Ä—ã—à–∞!\n
    –ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /new_lot""")


# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –±–æ—Ç –ø–µ—Ä–µ—Å—Ç–∞–ª –±—ã—Ç—å –∞–¥–º–∏–Ω–æ–º
@router.my_chat_member(ChatMemberUpdatedFilter(member_status_changed=
        (ADMINISTRATOR)
        >>
        (MEMBER)
    )
)
async def bot_added(event: ChatMemberUpdated, bot: Bot, state: FSMContext):
    await bot.send_message(chat_id=event.from_user.id, text=f"""
    –í –ö–∞–Ω–∞–ª–µ {event.chat.title} –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–∞–∫ –∫–∞–∫ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º""")


# —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–∞–Ω–¥ –∏ –ø—Ä–æ—Å—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
async def check_message(message, state):
    # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞
    if message.text == "–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à ‚ùáÔ∏è":
        await bot.send_message(chat_id=message.from_user.id, text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        # —É–¥–∞–ª–µ–Ω–∏–µ FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state.clear()
        # –∏—Å–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–∞–º–æ–π –∫–æ–º–∞–Ω–¥—ã
        await create_raffle(message, state)
        # —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –≤ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ if –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π, –¥–∞–ª—å—à–µ –∏—Å–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –∫–æ–º–∞–Ω–¥–∞
        return True
    elif message.text == "–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ üéÅ":
        await bot.send_message(chat_id=message.from_user.id, text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        await my_lot_menu(message, state)
        return True
    elif message.text == "–ú–æ–∏ –∫–∞–Ω–∞–ª—ã üì¢":
        await bot.send_message(chat_id=message.from_user.id, text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        await add_channel_def(message, state)
        return True
    elif message.text == "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öôÔ∏è":
        await bot.send_message(chat_id=message.from_user.id, text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        await support(message, state)
        return True
    elif message.text == "–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ë–æ—Ç–∞ ‚≠êÔ∏èÔ∏è":
        await bot.send_message(chat_id=message.from_user.id, text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        await state.clear()
        await stair(message, state)
        return True
    # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
    else:
        return False
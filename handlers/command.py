import asyncio

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import BufferedInputFile, InputMediaPhoto
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import settings
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.filters.command import Command

from keyboards.keyboard import menu, my_lot_keyboard, add_participant, my_channel, add_my_channel
from loop.send_raffle import send_raffle
from sql import UserDAO, ChannelDAO, RaffleDAO

# —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø–æ —Ä–∞–∑–Ω—ã–º —Ñ–∞–π–ª–∞–º
router = Router()
# –Ω–∞–¥–æ –æ—Ç –Ω–µ–≥–æ –∏–∑–±–∞–≤–∏—Ç—å—Å—è, –Ω–æ –Ω–µ –∑–Ω–∞—é –∫–∞–∫
bot = Bot(token=settings.get_token())

# –ø–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É start
@router.message(Command('start'))
async def send_welcome(message: types.Message, state: FSMContext):
    # –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø–æ id
    user = await UserDAO.find_all(telegram_id=message.from_user.id)
    # –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –±—ã–ª –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–æ —ç—Ç–æ–≥–æ
    if not user:
        # –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        await UserDAO.add(telegram_id=message.from_user.id,
                          first_name=message.from_user.first_name,
                          user_name=message.from_user.username,
                          channel=None)
        await bot.send_message(chat_id=message.from_user.id,
                               text="""üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!
        –ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –í–∞–º –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞ –∫–∞–Ω–∞–ª–µ.
        –ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à?""", reply_markup=menu
                               )

    # –µ—Å–ª–∏ –≤—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –ø–æ–ª—É—á–µ–Ω –µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text="""üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º!
–ù–∞—à –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –í–∞–º –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –Ω–∞ –∫–∞–Ω–∞–ª–µ.
–ì–æ—Ç–æ–≤—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à?""", reply_markup=menu
                               )


# –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–¥–µ—Ä–∂–∏—Ç /mylot
@router.message(F.text.contains('/mylot'))
async def my_lot(message: types.Message, state: FSMContext):
    # –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏–µ id —Ä–æ–∑—ã–≥—Ä—ã—à–∞
    raffle_id = message.text[6::]
    # —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ FSM id
    await state.update_data(id=raffle_id)
    # –∑–∞–ø—Ä–æ—Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —Ä–æ–∑—ã—Ä—ã—à–µ —á–µ—Ä–µ–∑ –µ–≥–æ id
    raffles = await RaffleDAO.find_one_or_none(id=raffle_id)
    # –µ—Å–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –∏–∑-–∑–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    try:
        raffle_format = {"id": raffles[0].id,
                         "status": raffles[0].status,
                         "number_participants": raffles[0].number_participants,
                         "number_winners": raffles[0].number_winners,
                         "end": f'–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤:{raffles[0].max_participants}'}
    # –µ—Å–ª–∏ —Ä–æ–∑—ã–≥—Ä—ã—à –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç –∏–∑-–∑–∞ –≤—Ä–µ–º–µ–Ω–∏
    except:
        raffle_format = {"id": raffles[0].id,
                         "status": raffles[0].status,
                         "number_participants": raffles[0].number_participants,
                         "number_winners": raffles[0].number_winners,
                         "end": f'–í—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {raffles[0].time_end}'}
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'–†–æ–∑—ã–≥—Ä—ã—à ‚Ññ{raffle_format["id"]}\n'
                                f'–°—Ç–∞—Ç—É—Å: {raffle_format["status"]}\n'
                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {raffle_format["number_participants"]}\n'
                                f'–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π: {raffle_format["number_winners"]}'
                                f'{raffle_format["end"]}',
                           reply_markup=my_lot_keyboard(raffle_format["status"]).as_markup()
                           )


# –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–¥–µ—Ä–∂–∏—Ç /delete_channel
@router.message(F.text.contains('/delete_channel'))
async def delete_my_channel(message: types.Message, state: FSMContext):
    # —É–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    await ChannelDAO.delete(channel_telegram_id=message.text.split(" ")[1])
    await bot.send_message(chat_id=message.from_user.id,
                           text=f'–ö–∞–Ω–∞–ª —É–¥–∞–ª–µ–Ω'
                           )


# –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–¥–µ—Ä–∂–∏—Ç /postlot (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à –∫—É–¥–∞-—Ç–æ –µ—â–µ)
@router.message(F.text.contains('/postlot'))
async def delete_my_channel(message: types.Message, state: FSMContext):
    # –∑–∞–ø—Ä–æ—Å –≤ –±–¥  –æ–¥–Ω–æ–≥–æ —Ä–æ–∑—ã–≥—Ä–∞—à–∞
    raffle = await RaffleDAO.find_one_or_none(id=message.text[8::])
    await bot.send_message(chat_id=message.from_user.id,
                           text=raffle[0].text_raffle,
                           reply_markup=add_participant(raffle[0].text_button, 0))
    # –∑–∞–ø—Ä–æ—Å –≤ –±–¥ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    channels = await ChannelDAO.find_all(user_telegram_id=message.from_user.id)
    await bot.send_message(chat_id=message.from_user.id,
                           text=f"üóì –í –∫–∞–∫–æ–º –∫–∞–Ω–∞–ª–µ –ø—É–±–ª–∏–∫—É–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à?", reply_markup=add_my_channel(channels, raffle_id=raffle[0].id).as_markup())



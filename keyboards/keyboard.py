from aiogram import types
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove, KeyboardButton, \
	InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder


kb = [
	[types.KeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à ‚ùáÔ∏è"), types.KeyboardButton(text="–ú–æ–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∏ üéÅ")],
	[types.KeyboardButton(text="–ú–æ–∏ –∫–∞–Ω–∞–ª—ã üì¢"), types.KeyboardButton(text="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ‚öôÔ∏è")],
    [types.KeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –ë–æ—Ç–∞ ‚≠êÔ∏èÔ∏è")],
]
menu = types.ReplyKeyboardMarkup(keyboard=kb, resize_keyboard=True)


kb = [
	[types.InlineKeyboardButton(text="–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª", callback_data="add_channel")]]
add_channel_keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)


# –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω–∞
# –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–¥–º–∏–Ω–æ–º
kb = [[types.InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞", callback_data="cancel_my_channel")]]
cancel = types.InlineKeyboardMarkup(inline_keyboard=kb)

kb = [
	[types.InlineKeyboardButton(text="–£—á–∞—Å—Ç–≤—É—é", callback_data="engage")],
	[types.InlineKeyboardButton(text="–£—á–∞—Å—Ç–≤—É—é!", callback_data="engage!")],
	[types.InlineKeyboardButton(text="–ü—Ä–∏–Ω—è—Ç—å —É—á–∞—Å—Ç–∏", callback_data="take_part")],
]
various_engage = types.InlineKeyboardMarkup(inline_keyboard=kb)

kb = [[types.InlineKeyboardButton(text="–†–æ–∑—ã–≥—Ä—ã—à –±–µ–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏", callback_data="enough_channel")]]
not_subscription = types.InlineKeyboardMarkup(inline_keyboard=kb)

kb = [
	[types.InlineKeyboardButton(text="–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å", callback_data="right_now")],
	[types.InlineKeyboardButton(text="–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é", callback_data="choose_time")],

]
publish_keyboard = types.InlineKeyboardMarkup(inline_keyboard=kb)



kb = [
	[types.InlineKeyboardButton(text="–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="participant")],
	[types.InlineKeyboardButton(text="–ü–æ –≤—Ä–µ–º–µ–Ω–∏", callback_data="time")],
]
need_raffle = types.InlineKeyboardMarkup(inline_keyboard=kb)

kb = [
	[types.InlineKeyboardButton(text="–ü–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤", callback_data="change_participant")],
	[types.InlineKeyboardButton(text="–ü–æ –≤—Ä–µ–º–µ–Ω–∏", callback_data="change_time")],
	[types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="change_cancel")],
]
need_raffle_change = types.InlineKeyboardMarkup(inline_keyboard=kb)

kb = [
	[types.InlineKeyboardButton(text="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å", callback_data="save")],
	[types.InlineKeyboardButton(text="–æ—Ç–º–µ–Ω–∞", callback_data="cancel")],
]
save_raffle = types.InlineKeyboardMarkup(inline_keyboard=kb)

kb = [
	[types.InlineKeyboardButton(text="–î–∞", callback_data="Yes")],
]
Yes = types.InlineKeyboardMarkup(inline_keyboard=kb)

kb = [
	[types.InlineKeyboardButton(text="–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫–∞–Ω–∞–ª–æ–≤, –∏–¥–µ–º –¥–∞–ª—å—à–µ", callback_data="enough_channel")],
]
save = types.InlineKeyboardMarkup(inline_keyboard=kb)

kb = [
	[types.InlineKeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="confirmation")],
	[types.InlineKeyboardButton(text="–ù–µ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="no confirmation")],

]
confirmation_r = types.InlineKeyboardMarkup(inline_keyboard=kb)

kb = [
	[types.InlineKeyboardButton(text="–æ–±–Ω–æ–≤–∏—Ç—å –∏–º—è", callback_data="update_name")],
	[types.InlineKeyboardButton(text="—É–¥–∞–ª–∏—Ç—å –∏–∑ –±–æ—Ç–∞", callback_data="delete_channel")],

]
menu_channel = types.InlineKeyboardMarkup(inline_keyboard=kb)

kb = [
	[types.InlineKeyboardButton(text="–ü—É–±–ª–∏–∫—É–µ–º", callback_data="publish")],
	[types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∞", callback_data="no_publish")],

]
publishg = types.InlineKeyboardMarkup(inline_keyboard=kb)


def names_channel(list_name):
	result = InlineKeyboardBuilder()
	result.row(types.InlineKeyboardButton(text="–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª", callback_data="add_channel"))

	for i in list_name:
		result.row(types.InlineKeyboardButton(text=f"{i}", callback_data=f"name_my_channel {i}"))
	return result

# def names_channel_my_channel(list_name):
# 	result = InlineKeyboardBuilder()
# 	result.row(types.InlineKeyboardButton(text="–¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–∞–Ω–∞–ª", callback_data="add_channel"))
# 	for i in list_name:
# 		result.row(types.InlineKeyboardButton(text=f"{i}", callback_data=f"name_channel {i}"))
# 	return result

def add_participant(text_raffle, id):
	kb = [
		[types.InlineKeyboardButton(text=f"{text_raffle} ", callback_data=f"add_participant {id}")],
	]
	add_participant = types.InlineKeyboardMarkup(inline_keyboard=kb)
	return add_participant

def my_channel(channels):
	result = InlineKeyboardBuilder()
	for i in channels:
		result.row(types.InlineKeyboardButton(text=f"{i.name}", callback_data=f"name_channel {i.id}"))
	return result

def add_my_channel(channels, raffle_id):
	result = InlineKeyboardBuilder()
	for i in channels:
		result.row(types.InlineKeyboardButton(text=f"{i.name}", callback_data=f"add_channel,{i.id},{i.name},{raffle_id}"))
	return result

def button_raffle(button):
	result = InlineKeyboardBuilder()
	result.row(types.InlineKeyboardButton(text=f"{button}", callback_data=f"{button}"))
	return result

def my_lot_keyboard(status):
	result = InlineKeyboardBuilder()

	if status == "publish":
		result.row(types.InlineKeyboardButton(text=f"–ò–∑–º–µ–Ω–µ–Ω–∏—è —É—Å–ª–æ–≤–∏—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
											  callback_data=f"update_result"))
		result.row(types.InlineKeyboardButton(text=f"–ü–æ–¥–≤–µ—Å—Ç–∏ –∏—Ç–æ–≥–∏ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å" ,
											  callback_data=f"chouse_winner"))
	elif status == "end":
		pass
		# result.row(types.InlineKeyboardButton(text=f"–≤—ã–±—Ä–∞—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π",
		# 									  callback_data=f"add_winner"))
	else:
		result.row(types.InlineKeyboardButton(text=f"–∏–∑–º–µ–Ω–∏—Ç—å —É—Å–ª–æ–≤–∏—è –ø–æ–¥–≤–µ–¥–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤",
											  callback_data=f"update_result"))
	result.row(types.InlineKeyboardButton(text=f"–£–¥–∞–ª–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à",
										  callback_data=f"delete_raffle"))
	return result
